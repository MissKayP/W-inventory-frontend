import React, { createContext, useState, useContext, useEffect } from 'react';

// Create context for inventory management
export const InventoryContext = createContext();

// Custom hook to use the InventoryContext
export const useInventory = () => {
  return useContext(InventoryContext);
};

// Provider component
export const InventoryProvider = ({ children }) => {
  const loadProductsFromStorage = () => {
    const storedProducts = localStorage.getItem('products');
    return storedProducts ? JSON.parse(storedProducts) : [];
  };

  const loadAuthenticationStatus = () => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    return storedAuth === 'true'; // Convert from string to boolean
  };

  // State initialization
  const [isAuthenticated, setIsAuthenticated] = useState(loadAuthenticationStatus());
  const [products, setProducts] = useState(loadProductsFromStorage());
  const [users, setUsers] = useState([]); // You can also persist users if needed.

  // User authentication functions
  const loginUser = (credentials) => {
    const foundUser = users.find(
      (user) => user.username === credentials.username && user.password === credentials.password
    );

    if (foundUser) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true'); // Save authentication state
      return true;
    } else {
      setIsAuthenticated(false);
      return false;
    }
  };

  const logoutUser = () => {
    setIsAuthenticated(false);
    localStorage.setItem('isAuthenticated', 'false'); // Save authentication state
  };

  const registerUser = (newUser) => {
    const userExists = users.some((user) => user.username === newUser.username);
    if (!userExists) {
      setUsers((prevUsers) => [...prevUsers, newUser]);
      return true;
    }
    return false;
  };

  // Product management functions
  const addProduct = (newProduct) => {
    setProducts((prev) => {
      const updatedProducts = [...prev, newProduct];
      localStorage.setItem('products', JSON.stringify(updatedProducts)); // Save to localStorage
      return updatedProducts;
    });
  };

  const updateProduct = (updatedProduct) => {
    setProducts((prev) => {
      const updatedProducts = prev.map((product) =>
        product.id === updatedProduct.id ? updatedProduct : product
      );
      localStorage.setItem('products', JSON.stringify(updatedProducts)); // Save to localStorage
      return updatedProducts;
    });
  };

  const deleteProduct = (id) => {
    setProducts((prev) => {
      const updatedProducts = prev.filter((product) => product.id !== id);
      localStorage.setItem('products', JSON.stringify(updatedProducts)); // Save to localStorage
      return updatedProducts;
    });
  };

  // Stock transaction management
  const addStockTransaction = ({ productId, quantity, type }) => {
    setProducts((prev) =>
      prev.map((product) => {
        if (product.id === productId) {
          const updatedQuantity = type === 'add'
            ? product.quantity + quantity
            : product.quantity - quantity;

          return {
            ...product,
            quantity: Math.max(updatedQuantity, 0), // Prevent negative quantities
          };
        }
        return product;
      })
    );
  };

  return (
    <InventoryContext.Provider
      value={{
        isAuthenticated,
        loginUser,
        logoutUser,
        products,
        addProduct,
        updateProduct,
        deleteProduct,
        users,
        registerUser, // Include registerUser if needed
        addStockTransaction, // Include stock transaction function
      }}
    >
      {children}
    </InventoryContext.Provider>
  );
};
import React, { useState, useEffect } from 'react';

const ProductManagement = () => {
  const [products, setProducts] = useState([]);
  const [productForm, setProductForm] = useState({
    name: '',
    description: '',
    category: '',
    price: '',
    quantity: '',
  });
  const [isEditing, setIsEditing] = useState(false);
  const [editingProductId, setEditingProductId] = useState(null);

  // Fetch products from backend when the component mounts
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await fetch('http://localhost:5002/api/products');
        const data = await response.json();
        setProducts(data); // Update state with fetched products
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };
    fetchProducts();
  }, []); // Runs only once when component mounts

  // Handle form input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setProductForm((prev) => ({ ...prev, [name]: value }));
  };

  // Handle form submission (Add or Update Product)
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isEditing) {
      // Update existing product
      try {
        await fetch(`http://localhost:5002/api/products/${editingProductId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(productForm),
        });
        setIsEditing(false);
        setEditingProductId(null);
      } catch (error) {
        console.error('Error updating product:', error);
      }
    } else {
      // Add new product
      try {
        const response = await fetch('http://localhost:5002/api/products', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(productForm),
        });
        const data = await response.json();
        const newProduct = { ...productForm, id: data.productId };
        setProducts([...products, newProduct]); // Add new product to the list
      } catch (error) {
        console.error('Error adding product:', error);
      }
    }
    // Reset form after submission
    setProductForm({ name: '', description: '', category: '', price: '', quantity: '' });
  };

  // Handle Edit button click
  const handleEdit = (product) => {
    setProductForm(product);
    setIsEditing(true);
    setEditingProductId(product.id);
  };

  // Handle Delete button click
  const handleDelete = async (id) => {
    try {
      await fetch(`http://localhost:5002/api/products/${id}`, {
        method: 'DELETE',
      });
      setProducts(products.filter((product) => product.id !== id)); // Remove deleted product from list
    } catch (error) {
      console.error('Error deleting product:', error);
    }
  };

  return (
    <div>
      <h1>Product Management</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="name"
          value={productForm.name}
          onChange={handleChange}
          placeholder="Product Name"
          required
        />
        <input
          type="text"
          name="description"
          value={productForm.description}
          onChange={handleChange}
          placeholder="Description"
          required
        />
        <input
          type="text"
          name="category"
          value={productForm.category}
          onChange={handleChange}
          placeholder="Category"
          required
        />
        <input
          type="number"
          name="price"
          value={productForm.price}
          onChange={handleChange}
          placeholder="Price"
          required
        />
        <input
          type="number"
          name="quantity"
          value={productForm.quantity}
          onChange={handleChange}
          placeholder="Initial Quantity"
          required
        />
        <button type="submit">{isEditing ? 'Update Product' : 'Add Product'}</button>
      </form>

      <h2>Products</h2>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Category</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {products.map((product) => (
            <tr key={product.id}>
              <td>{product.name}</td>
              <td>{product.description}</td>
              <td>{product.category}</td>
              <td>M{product.price}</td>
              <td>{product.quantity}</td>
              <td>
                <button onClick={() => handleEdit(product)}>Edit</button>
                <button onClick={() => handleDelete(product.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProductManagement;
import React, { useContext, useEffect } from 'react';
import { InventoryContext } from '../context/InventoryContext';
import { Line } from 'react-chartjs-2';
import { Carousel } from 'react-responsive-carousel';
import 'react-responsive-carousel/lib/styles/carousel.min.css';
import './Dashboard.css';
import product1 from '../assets/yogi.jpeg';
import product2 from '../assets/lolli.jpg';
import product3 from '../assets/sanitary.jpeg';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

// Register chart components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  const { products } = useContext(InventoryContext);

  // Prepare data for stock overview chart
  const stockData = {
    labels: products.map((product) => product.name),
    datasets: [
      {
        label: 'Stock Level',
        data: products.map((product) => product.quantity),
        backgroundColor: 'rgba(54, 162, 235, 0.2)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(54, 162, 235, 1)',
      },
    ],
  };

  const stockOptions = {
    responsive: true,
    maintainAspectRatio: true,
    aspectRatio: 2,
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Stock Quantity',
        },
      },
      x: {
        title: {
          display: true,
          text: 'Products',
        },
      },
    },
    layout: {
      padding: 20,
    },
    elements: {
      line: {
        tension: 0.4,
      },
    },
  };

  const lowStockThreshold = 10;
  const lowStockProducts = products.filter(product => product.quantity < lowStockThreshold);

  const imageUrls = [product1, product2, product3];

  return (
    <div className="dashboard">
      <h1>Dashboard</h1>

      <div className="stock-overview">
        <h2>Current Stock Levels</h2>
        <div className="chart-container">
          <Line data={stockData} options={stockOptions} />
        </div>
      </div>

      {lowStockProducts.length > 0 && (
        <div className="low-stock-alert">
          <h2>Low Stock Alerts</h2>
          <ul>
            {lowStockProducts.map((product) => (
              <li key={product.id}>
                <strong>{product.name}</strong>: Only {product.quantity} left in stock!
              </li>
            ))}
          </ul>
        </div>
      )}

      <div className="stock-carousel">
        <h2>Featured Products</h2>
        <Carousel
          autoPlay
          infiniteLoop
          interval={3000}
          showThumbs={false}
          showStatus={false}
          stopOnHover={true}
        >
          {imageUrls.map((url, index) => (
            <div key={index}>
              <img src={url} alt={`Product ${index + 1}`} />
            </div>
          ))}
        </Carousel>
      </div>

      <div className="product-table-container">
        <h2>Product Stock Levels</h2>
        <table className="product-table">
          <thead>
            <tr>
              <th>Product Name</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product) => (
              <tr key={product.id}>
                <td>{product.name}</td>
                <td>{product.quantity}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Dashboard;
