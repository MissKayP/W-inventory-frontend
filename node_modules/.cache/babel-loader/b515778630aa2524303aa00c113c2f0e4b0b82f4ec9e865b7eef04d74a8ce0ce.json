{"ast":null,"code":"var _jsxFileName = \"/Users/Khahli/Desktop/wings-cafe-inventory/src/context/InventoryContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryContext = /*#__PURE__*/createContext();\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const loginUser = () => {\n    setIsAuthenticated(true);\n  };\n  const logoutUser = () => {\n    setIsAuthenticated(false);\n  };\n  const addProduct = product => {\n    setProducts([...products, product]);\n  };\n  const updateProduct = updatedProduct => {\n    setProducts(products.map(product => product.id === updatedProduct.id ? updatedProduct : product));\n  };\n  const deleteProduct = id => {\n    setProducts(products.filter(product => product.id !== id));\n  };\n  const addStockTransaction = transaction => {\n    setTransactions([...transactions, transaction]);\n    const productIndex = products.findIndex(product => product.id === transaction.productId);\n    if (productIndex !== -1) {\n      const updatedProducts = [...products];\n      updatedProducts[productIndex].quantity += transaction.type === 'add' ? transaction.quantity : -transaction.quantity;\n      setProducts(updatedProducts);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      products,\n      addProduct,\n      updateProduct,\n      deleteProduct,\n      transactions,\n      addStockTransaction,\n      isAuthenticated,\n      loginUser,\n      logoutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(InventoryProvider, \"f/dQBir2E3tEJwr5mvdTb8FnQQ0=\");\n_c = InventoryProvider;\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","InventoryContext","InventoryProvider","children","_s","products","setProducts","transactions","setTransactions","isAuthenticated","setIsAuthenticated","loginUser","logoutUser","addProduct","product","updateProduct","updatedProduct","map","id","deleteProduct","filter","addStockTransaction","transaction","productIndex","findIndex","productId","updatedProducts","quantity","type","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Khahli/Desktop/wings-cafe-inventory/src/context/InventoryContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const InventoryContext = createContext();\n\nexport const InventoryProvider = ({ children }) => {\n  const [products, setProducts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const loginUser = () => {\n    setIsAuthenticated(true);\n  };\n\n  const logoutUser = () => {\n    setIsAuthenticated(false);\n  };\n\n  const addProduct = (product) => {\n    setProducts([...products, product]);\n  };\n\n  const updateProduct = (updatedProduct) => {\n    setProducts(products.map(product => product.id === updatedProduct.id ? updatedProduct : product));\n  };\n\n  const deleteProduct = (id) => {\n    setProducts(products.filter(product => product.id !== id));\n  };\n\n  const addStockTransaction = (transaction) => {\n    setTransactions([...transactions, transaction]);\n    const productIndex = products.findIndex(product => product.id === transaction.productId);\n\n    if (productIndex !== -1) {\n      const updatedProducts = [...products];\n      updatedProducts[productIndex].quantity += transaction.type === 'add' ? transaction.quantity : -transaction.quantity;\n      setProducts(updatedProducts);\n    }\n  };\n\n  return (\n    <InventoryContext.Provider value={{\n      products,\n      addProduct,\n      updateProduct,\n      deleteProduct,\n      transactions,\n      addStockTransaction,\n      isAuthenticated,\n      loginUser,\n      logoutUser\n    }}>\n      {children}\n    </InventoryContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMK,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMa,SAAS,GAAGA,CAAA,KAAM;IACtBD,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBF,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMG,UAAU,GAAIC,OAAO,IAAK;IAC9BR,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAES,OAAO,CAAC,CAAC;EACrC,CAAC;EAED,MAAMC,aAAa,GAAIC,cAAc,IAAK;IACxCV,WAAW,CAACD,QAAQ,CAACY,GAAG,CAACH,OAAO,IAAIA,OAAO,CAACI,EAAE,KAAKF,cAAc,CAACE,EAAE,GAAGF,cAAc,GAAGF,OAAO,CAAC,CAAC;EACnG,CAAC;EAED,MAAMK,aAAa,GAAID,EAAE,IAAK;IAC5BZ,WAAW,CAACD,QAAQ,CAACe,MAAM,CAACN,OAAO,IAAIA,OAAO,CAACI,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC5D,CAAC;EAED,MAAMG,mBAAmB,GAAIC,WAAW,IAAK;IAC3Cd,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEe,WAAW,CAAC,CAAC;IAC/C,MAAMC,YAAY,GAAGlB,QAAQ,CAACmB,SAAS,CAACV,OAAO,IAAIA,OAAO,CAACI,EAAE,KAAKI,WAAW,CAACG,SAAS,CAAC;IAExF,IAAIF,YAAY,KAAK,CAAC,CAAC,EAAE;MACvB,MAAMG,eAAe,GAAG,CAAC,GAAGrB,QAAQ,CAAC;MACrCqB,eAAe,CAACH,YAAY,CAAC,CAACI,QAAQ,IAAIL,WAAW,CAACM,IAAI,KAAK,KAAK,GAAGN,WAAW,CAACK,QAAQ,GAAG,CAACL,WAAW,CAACK,QAAQ;MACnHrB,WAAW,CAACoB,eAAe,CAAC;IAC9B;EACF,CAAC;EAED,oBACE1B,OAAA,CAACC,gBAAgB,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAChCzB,QAAQ;MACRQ,UAAU;MACVE,aAAa;MACbI,aAAa;MACbZ,YAAY;MACZc,mBAAmB;MACnBZ,eAAe;MACfE,SAAS;MACTC;IACF,CAAE;IAAAT,QAAA,EACCA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC9B,EAAA,CAnDWF,iBAAiB;AAAAiC,EAAA,GAAjBjC,iBAAiB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}