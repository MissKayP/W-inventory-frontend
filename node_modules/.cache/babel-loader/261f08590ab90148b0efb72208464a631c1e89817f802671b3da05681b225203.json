{"ast":null,"code":"var _jsxFileName = \"/Users/Khahli/Desktop/wings-cafe-inventory/src/context/InventoryContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryContext = /*#__PURE__*/createContext();\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize products state with localStorage data or an empty array\n  const [products, setProducts] = useState(() => {\n    const storedProducts = localStorage.getItem('products');\n    return storedProducts ? JSON.parse(storedProducts) : [];\n  });\n  const [transactions, setTransactions] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Update localStorage whenever products change\n  useEffect(() => {\n    localStorage.setItem('products', JSON.stringify(products));\n  }, [products]);\n  const addProduct = product => {\n    setProducts([...products, product]);\n  };\n  const updateProduct = updatedProduct => {\n    setProducts(products.map(product => product.id === updatedProduct.id ? updatedProduct : product));\n  };\n  const deleteProduct = id => {\n    setProducts(products.filter(product => product.id !== id));\n  };\n  const addStockTransaction = transaction => {\n    setTransactions([...transactions, transaction]);\n    // Automatically update product quantity based on transaction type\n    const updatedProducts = products.map(product => {\n      if (product.id === transaction.productId) {\n        return {\n          ...product,\n          quantity: transaction.type === 'add' ? product.quantity + parseInt(transaction.quantity) : product.quantity - parseInt(transaction.quantity)\n        };\n      }\n      return product;\n    });\n    setProducts(updatedProducts);\n  };\n  const loginUser = () => setIsAuthenticated(true);\n  const logoutUser = () => setIsAuthenticated(false);\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      products,\n      addProduct,\n      updateProduct,\n      deleteProduct,\n      transactions,\n      addStockTransaction,\n      isAuthenticated,\n      loginUser,\n      logoutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(InventoryProvider, \"EezzCWk2DD0uL1ALo3Ulom/sJ88=\");\n_c = InventoryProvider;\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","InventoryContext","InventoryProvider","children","_s","products","setProducts","storedProducts","localStorage","getItem","JSON","parse","transactions","setTransactions","isAuthenticated","setIsAuthenticated","setItem","stringify","addProduct","product","updateProduct","updatedProduct","map","id","deleteProduct","filter","addStockTransaction","transaction","updatedProducts","productId","quantity","type","parseInt","loginUser","logoutUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Khahli/Desktop/wings-cafe-inventory/src/context/InventoryContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const InventoryContext = createContext();\n\nexport const InventoryProvider = ({ children }) => {\n  // Initialize products state with localStorage data or an empty array\n  const [products, setProducts] = useState(() => {\n    const storedProducts = localStorage.getItem('products');\n    return storedProducts ? JSON.parse(storedProducts) : [];\n  });\n  const [transactions, setTransactions] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Update localStorage whenever products change\n  useEffect(() => {\n    localStorage.setItem('products', JSON.stringify(products));\n  }, [products]);\n\n  const addProduct = (product) => {\n    setProducts([...products, product]);\n  };\n\n  const updateProduct = (updatedProduct) => {\n    setProducts(products.map(product => product.id === updatedProduct.id ? updatedProduct : product));\n  };\n\n  const deleteProduct = (id) => {\n    setProducts(products.filter(product => product.id !== id));\n  };\n\n  const addStockTransaction = (transaction) => {\n    setTransactions([...transactions, transaction]);\n    // Automatically update product quantity based on transaction type\n    const updatedProducts = products.map(product => {\n      if (product.id === transaction.productId) {\n        return {\n          ...product,\n          quantity: transaction.type === 'add' ? product.quantity + parseInt(transaction.quantity) : product.quantity - parseInt(transaction.quantity)\n        };\n      }\n      return product;\n    });\n    setProducts(updatedProducts);\n  };\n\n  const loginUser = () => setIsAuthenticated(true);\n  const logoutUser = () => setIsAuthenticated(false);\n\n  return (\n    <InventoryContext.Provider value={{\n      products, addProduct, updateProduct, deleteProduct,\n      transactions, addStockTransaction,\n      isAuthenticated, loginUser, logoutUser\n    }}>\n      {children}\n    </InventoryContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}