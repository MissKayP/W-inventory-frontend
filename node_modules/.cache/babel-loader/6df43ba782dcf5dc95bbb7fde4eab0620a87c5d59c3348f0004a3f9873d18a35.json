{"ast":null,"code":"var _jsxFileName = \"/Users/Khahli/Desktop/wings-cafe-inventory/src/context/InventoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create InventoryContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryContext = /*#__PURE__*/createContext();\n\n// InventoryProvider to wrap the app and manage products and user authentication\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s();\n  const [products, setProducts] = useState([]); // State to hold products\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n\n  // Function to log in the user\n  const loginUser = () => {\n    setIsAuthenticated(true); // Set user as logged in\n  };\n\n  // Function to log out the user\n  const logoutUser = () => {\n    setIsAuthenticated(false); // Set user as logged out\n  };\n\n  // Function to add a new product\n  const addProduct = product => {\n    setProducts(prevProducts => [...prevProducts, product]); // Add the new product to the state\n  };\n\n  // Function to update an existing product\n  const updateProduct = updatedProduct => {\n    setProducts(prevProducts => prevProducts.map(product => product.id === updatedProduct.id ? updatedProduct : product // Update the specific product\n    ));\n  };\n\n  // Function to delete a product\n  const deleteProduct = productId => {\n    setProducts(prevProducts => prevProducts.filter(product => product.id !== productId)); // Remove the product from the state\n  };\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      products,\n      addProduct,\n      updateProduct,\n      deleteProduct,\n      loginUser,\n      logoutUser,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the InventoryContext\n_s(InventoryProvider, \"nznmGQPU/GIL1SoyekS74CaCCh0=\");\n_c = InventoryProvider;\nexport const useInventory = () => {\n  _s2();\n  return useContext(InventoryContext);\n};\n_s2(useInventory, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","InventoryContext","InventoryProvider","children","_s","products","setProducts","isAuthenticated","setIsAuthenticated","loginUser","logoutUser","addProduct","product","prevProducts","updateProduct","updatedProduct","map","id","deleteProduct","productId","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useInventory","_s2","$RefreshReg$"],"sources":["/Users/Khahli/Desktop/wings-cafe-inventory/src/context/InventoryContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Create InventoryContext\nexport const InventoryContext = createContext();\n\n// InventoryProvider to wrap the app and manage products and user authentication\nexport const InventoryProvider = ({ children }) => {\n  const [products, setProducts] = useState([]); // State to hold products\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n\n  // Function to log in the user\n  const loginUser = () => {\n    setIsAuthenticated(true); // Set user as logged in\n  };\n\n  // Function to log out the user\n  const logoutUser = () => {\n    setIsAuthenticated(false); // Set user as logged out\n  };\n\n  // Function to add a new product\n  const addProduct = (product) => {\n    setProducts((prevProducts) => [...prevProducts, product]); // Add the new product to the state\n  };\n\n  // Function to update an existing product\n  const updateProduct = (updatedProduct) => {\n    setProducts((prevProducts) =>\n      prevProducts.map((product) =>\n        product.id === updatedProduct.id ? updatedProduct : product // Update the specific product\n      )\n    );\n  };\n\n  // Function to delete a product\n  const deleteProduct = (productId) => {\n    setProducts((prevProducts) => prevProducts.filter((product) => product.id !== productId)); // Remove the product from the state\n  };\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        products,\n        addProduct,\n        updateProduct,\n        deleteProduct,\n        loginUser,\n        logoutUser,\n        isAuthenticated,\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n};\n\n// Custom hook to use the InventoryContext\nexport const useInventory = () => useContext(InventoryContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,CAAC;;AAE/C;AACA,OAAO,MAAMM,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtBD,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBF,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMG,UAAU,GAAIC,OAAO,IAAK;IAC9BN,WAAW,CAAEO,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,OAAO,CAAC,CAAC,CAAC,CAAC;EAC7D,CAAC;;EAED;EACA,MAAME,aAAa,GAAIC,cAAc,IAAK;IACxCT,WAAW,CAAEO,YAAY,IACvBA,YAAY,CAACG,GAAG,CAAEJ,OAAO,IACvBA,OAAO,CAACK,EAAE,KAAKF,cAAc,CAACE,EAAE,GAAGF,cAAc,GAAGH,OAAO,CAAC;IAC9D,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMM,aAAa,GAAIC,SAAS,IAAK;IACnCb,WAAW,CAAEO,YAAY,IAAKA,YAAY,CAACO,MAAM,CAAER,OAAO,IAAKA,OAAO,CAACK,EAAE,KAAKE,SAAS,CAAC,CAAC,CAAC,CAAC;EAC7F,CAAC;EAED,oBACEnB,OAAA,CAACC,gBAAgB,CAACoB,QAAQ;IACxBC,KAAK,EAAE;MACLjB,QAAQ;MACRM,UAAU;MACVG,aAAa;MACbI,aAAa;MACbT,SAAS;MACTC,UAAU;MACVH;IACF,CAAE;IAAAJ,QAAA,EAEDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;;AAED;AAAAtB,EAAA,CAlDaF,iBAAiB;AAAAyB,EAAA,GAAjBzB,iBAAiB;AAmD9B,OAAO,MAAM0B,YAAY,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMhC,UAAU,CAACI,gBAAgB,CAAC;AAAA;AAAC4B,GAAA,CAAlDD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}