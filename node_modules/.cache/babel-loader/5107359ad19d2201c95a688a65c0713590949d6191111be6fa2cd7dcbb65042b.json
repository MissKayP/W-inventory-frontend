{"ast":null,"code":"var _jsxFileName = \"/Users/Khahli/Documents/wings-cafe-inventory/frontend/src/context/InventoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryContext = /*#__PURE__*/createContext();\nexport const useInventory = () => {\n  _s();\n  return useContext(InventoryContext);\n};\n\n// Provider component\n_s(useInventory, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s2();\n  const loadProductsFromStorage = () => {\n    const storedProducts = localStorage.getItem('products');\n    return storedProducts ? JSON.parse(storedProducts) : [];\n  };\n  const loadAuthenticationStatus = () => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    return storedAuth === 'true'; // Convert from string to boolean\n  };\n\n  // State initialization\n  const [isAuthenticated, setIsAuthenticated] = useState(loadAuthenticationStatus());\n  const [products, setProducts] = useState(loadProductsFromStorage());\n  const [users, setUsers] = useState([]); // You can also persist users if needed.\n\n  // Product management functions\n  const addProduct = async newProduct => {\n    try {\n      const response = await fetch('http://localhost:5002/api/products', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProduct)\n      });\n      if (response.ok) {\n        // Fetch latest products after adding a new one\n        await fetchProductsFromBackend();\n      }\n    } catch (error) {\n      console.error('Error adding product:', error);\n    }\n  };\n  const updateProducts = async () => {\n    await fetchProductsFromBackend();\n  };\n  const fetchProductsFromBackend = async () => {\n    try {\n      const response = await fetch('http://localhost:5002/api/products');\n      const data = await response.json();\n      setProducts(data); // Update the state with fetched products\n      localStorage.setItem('products', JSON.stringify(data)); // Save to localStorage\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n\n  // Stock transaction management\n  const addStockTransaction = ({\n    productId,\n    quantity,\n    type\n  }) => {\n    setProducts(prevProducts => prevProducts.map(product => {\n      if (product.id === productId) {\n        const updatedQuantity = type === 'add' ? product.quantity + quantity : product.quantity - quantity;\n        return {\n          ...product,\n          quantity: Math.max(updatedQuantity, 0)\n        }; // Prevent negative quantities\n      }\n      return product;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      isAuthenticated,\n      products,\n      addProduct,\n      updateProducts,\n      addStockTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s2(InventoryProvider, \"Qlurqdds59Yjx1gPIcmMCTy9bac=\");\n_c = InventoryProvider;\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","InventoryContext","useInventory","_s","InventoryProvider","children","_s2","loadProductsFromStorage","storedProducts","localStorage","getItem","JSON","parse","loadAuthenticationStatus","storedAuth","isAuthenticated","setIsAuthenticated","products","setProducts","users","setUsers","addProduct","newProduct","response","fetch","method","headers","body","stringify","ok","fetchProductsFromBackend","error","console","updateProducts","data","json","setItem","addStockTransaction","productId","quantity","type","prevProducts","map","product","id","updatedQuantity","Math","max","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Khahli/Documents/wings-cafe-inventory/frontend/src/context/InventoryContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nexport const InventoryContext = createContext();\n\nexport const useInventory = () => {\n  return useContext(InventoryContext);\n};\n\n// Provider component\nexport const InventoryProvider = ({ children }) => {\n  const loadProductsFromStorage = () => {\n    const storedProducts = localStorage.getItem('products');\n    return storedProducts ? JSON.parse(storedProducts) : [];\n  };\n\n  const loadAuthenticationStatus = () => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    return storedAuth === 'true'; // Convert from string to boolean\n  };\n\n  // State initialization\n  const [isAuthenticated, setIsAuthenticated] = useState(loadAuthenticationStatus());\n  const [products, setProducts] = useState(loadProductsFromStorage());\n  const [users, setUsers] = useState([]); // You can also persist users if needed.\n\n  // Product management functions\n  const addProduct = async (newProduct) => {\n    try {\n      const response = await fetch('http://localhost:5002/api/products', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newProduct),\n      });\n\n      if (response.ok) {\n        // Fetch latest products after adding a new one\n        await fetchProductsFromBackend();\n      }\n    } catch (error) {\n      console.error('Error adding product:', error);\n    }\n  };\n\n  const updateProducts = async () => {\n    await fetchProductsFromBackend();\n  };\n\n  const fetchProductsFromBackend = async () => {\n    try {\n      const response = await fetch('http://localhost:5002/api/products');\n      const data = await response.json();\n      setProducts(data); // Update the state with fetched products\n      localStorage.setItem('products', JSON.stringify(data)); // Save to localStorage\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n\n  // Stock transaction management\n  const addStockTransaction = ({ productId, quantity, type }) => {\n    setProducts((prevProducts) =>\n      prevProducts.map((product) => {\n        if (product.id === productId) {\n          const updatedQuantity = type === 'add' ? product.quantity + quantity : product.quantity - quantity;\n          return { ...product, quantity: Math.max(updatedQuantity, 0) }; // Prevent negative quantities\n        }\n        return product;\n      })\n    );\n  };\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        isAuthenticated,\n        products,\n        addProduct,\n        updateProducts,\n        addStockTransaction,\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMO,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,OAAON,UAAU,CAACI,gBAAgB,CAAC;AACrC,CAAC;;AAED;AAAAE,EAAA,CAJaD,YAAY;AAKzB,OAAO,MAAME,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACjD,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;IACpC,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,OAAOF,cAAc,GAAGG,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,GAAG,EAAE;EACzD,CAAC;EAED,MAAMK,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,UAAU,GAAGL,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC1D,OAAOI,UAAU,KAAK,MAAM,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAACiB,wBAAwB,CAAC,CAAC,CAAC;EAClF,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAACW,uBAAuB,CAAC,CAAC,CAAC;EACnE,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMyB,UAAU,GAAG,MAAOC,UAAU,IAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEhB,IAAI,CAACiB,SAAS,CAACN,UAAU;MACjC,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACM,EAAE,EAAE;QACf;QACA,MAAMC,wBAAwB,CAAC,CAAC;MAClC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMH,wBAAwB,CAAC,CAAC;EAClC,CAAC;EAED,MAAMA,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAClE,MAAMU,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCjB,WAAW,CAACgB,IAAI,CAAC,CAAC,CAAC;MACnBzB,YAAY,CAAC2B,OAAO,CAAC,UAAU,EAAEzB,IAAI,CAACiB,SAAS,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;;EAED;EACA,MAAMM,mBAAmB,GAAGA,CAAC;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAK,CAAC,KAAK;IAC7DtB,WAAW,CAAEuB,YAAY,IACvBA,YAAY,CAACC,GAAG,CAAEC,OAAO,IAAK;MAC5B,IAAIA,OAAO,CAACC,EAAE,KAAKN,SAAS,EAAE;QAC5B,MAAMO,eAAe,GAAGL,IAAI,KAAK,KAAK,GAAGG,OAAO,CAACJ,QAAQ,GAAGA,QAAQ,GAAGI,OAAO,CAACJ,QAAQ,GAAGA,QAAQ;QAClG,OAAO;UAAE,GAAGI,OAAO;UAAEJ,QAAQ,EAAEO,IAAI,CAACC,GAAG,CAACF,eAAe,EAAE,CAAC;QAAE,CAAC,CAAC,CAAC;MACjE;MACA,OAAOF,OAAO;IAChB,CAAC,CACH,CAAC;EACH,CAAC;EAED,oBACE3C,OAAA,CAACC,gBAAgB,CAAC+C,QAAQ;IACxBC,KAAK,EAAE;MACLlC,eAAe;MACfE,QAAQ;MACRI,UAAU;MACVY,cAAc;MACdI;IACF,CAAE;IAAAhC,QAAA,EAEDA;EAAQ;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC/C,GAAA,CA7EWF,iBAAiB;AAAAkD,EAAA,GAAjBlD,iBAAiB;AAAA,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}