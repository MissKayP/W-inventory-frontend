{"ast":null,"code":"var _jsxFileName = \"/Users/Khahli/Documents/wings-cafe-inventory/frontend/src/context/InventoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryContext = /*#__PURE__*/createContext();\nexport const useInventory = () => {\n  _s();\n  return useContext(InventoryContext);\n};\n\n// Provider component\n_s(useInventory, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s2();\n  const loadProductsFromStorage = () => {\n    const storedProducts = localStorage.getItem('products');\n    return storedProducts ? JSON.parse(storedProducts) : [];\n  };\n  const loadAuthenticationStatus = () => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    return storedAuth === 'true'; // Convert from string to boolean\n  };\n\n  // State initialization\n  const [isAuthenticated, setIsAuthenticated] = useState(loadAuthenticationStatus());\n  const [products, setProducts] = useState(loadProductsFromStorage());\n  const [users, setUsers] = useState([]); // You can also persist users if needed.\n\n  // User authentication functions\n  const loginUser = credentials => {\n    const foundUser = users.find(user => user.username === credentials.username && user.password === credentials.password);\n    if (foundUser) {\n      setIsAuthenticated(true);\n      localStorage.setItem('isAuthenticated', 'true'); // Save authentication state\n      return true;\n    } else {\n      setIsAuthenticated(false);\n      return false;\n    }\n  };\n  const logoutUser = () => {\n    setIsAuthenticated(false);\n    localStorage.setItem('isAuthenticated', 'false'); // Save authentication state\n  };\n  const registerUser = newUser => {\n    const userExists = users.some(user => user.username === newUser.username);\n    if (!userExists) {\n      setUsers(prevUsers => [...prevUsers, newUser]);\n      return true;\n    }\n    return false;\n  };\n\n  // Fetch products from backend\n  const fetchProductsFromBackend = async () => {\n    try {\n      const response = await fetch('http://localhost:5002/api/products');\n      const data = await response.json();\n      setProducts(data); // Update the state with fetched products\n      localStorage.setItem('products', JSON.stringify(data)); // Save to localStorage\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n\n  // Function to update products (Fetch latest products from the backend)\n  const updateProducts = async () => {\n    await fetchProductsFromBackend(); // Refresh products from the backend\n  };\n\n  // Product management functions\n  const addProduct = async newProduct => {\n    try {\n      // Send new product to the backend (you need to adjust the URL if needed)\n      const response = await fetch('http://localhost:5002/api/products', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProduct)\n      });\n      if (response.ok) {\n        await updateProducts(); // Refresh products after adding a new one\n      }\n    } catch (error) {\n      console.error('Error adding product:', error);\n    }\n  };\n  const updateProduct = async updatedProduct => {\n    try {\n      // Send updated product to the backend (you need to adjust the URL if needed)\n      const response = await fetch(`http://localhost:5002/api/products/${updatedProduct.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProduct)\n      });\n      if (response.ok) {\n        await updateProducts(); // Refresh products after updating one\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n    }\n  };\n  const deleteProduct = async id => {\n    try {\n      // Send delete request to the backend (adjust URL if needed)\n      const response = await fetch(`http://localhost:5002/api/products/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        await updateProducts(); // Refresh products after deleting one\n      }\n    } catch (error) {\n      console.error('Error deleting product:', error);\n    }\n  };\n\n  // Stock transaction management\n  const addStockTransaction = ({\n    productId,\n    quantity,\n    type\n  }) => {\n    setProducts(prevProducts => {\n      const updatedProducts = prevProducts.map(product => {\n        if (product.id === productId) {\n          const updatedQuantity = type === 'add' ? product.quantity + quantity : product.quantity - quantity;\n          return {\n            ...product,\n            quantity: Math.max(updatedQuantity, 0) // Prevent negative quantities\n          };\n        }\n        return product;\n      });\n\n      // Update localStorage with the new products array\n      localStorage.setItem('products', JSON.stringify(updatedProducts));\n      return updatedProducts;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      isAuthenticated,\n      loginUser,\n      logoutUser,\n      products,\n      addProduct,\n      updateProduct,\n      deleteProduct,\n      users,\n      registerUser,\n      // Include registerUser if needed\n      addStockTransaction,\n      // Include stock transaction function\n      updateProducts // Include updateProducts for refreshing the list\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s2(InventoryProvider, \"Qlurqdds59Yjx1gPIcmMCTy9bac=\");\n_c = InventoryProvider;\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","InventoryContext","useInventory","_s","InventoryProvider","children","_s2","loadProductsFromStorage","storedProducts","localStorage","getItem","JSON","parse","loadAuthenticationStatus","storedAuth","isAuthenticated","setIsAuthenticated","products","setProducts","users","setUsers","loginUser","credentials","foundUser","find","user","username","password","setItem","logoutUser","registerUser","newUser","userExists","some","prevUsers","fetchProductsFromBackend","response","fetch","data","json","stringify","error","console","updateProducts","addProduct","newProduct","method","headers","body","ok","updateProduct","updatedProduct","id","deleteProduct","addStockTransaction","productId","quantity","type","prevProducts","updatedProducts","map","product","updatedQuantity","Math","max","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Khahli/Documents/wings-cafe-inventory/frontend/src/context/InventoryContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nexport const InventoryContext = createContext();\n\nexport const useInventory = () => {\n  return useContext(InventoryContext);\n};\n\n// Provider component\nexport const InventoryProvider = ({ children }) => {\n  const loadProductsFromStorage = () => {\n    const storedProducts = localStorage.getItem('products');\n    return storedProducts ? JSON.parse(storedProducts) : [];\n  };\n\n  const loadAuthenticationStatus = () => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    return storedAuth === 'true'; // Convert from string to boolean\n  };\n\n  // State initialization\n  const [isAuthenticated, setIsAuthenticated] = useState(loadAuthenticationStatus());\n  const [products, setProducts] = useState(loadProductsFromStorage());\n  const [users, setUsers] = useState([]); // You can also persist users if needed.\n\n  // User authentication functions\n  const loginUser = (credentials) => {\n    const foundUser = users.find(\n      (user) => user.username === credentials.username && user.password === credentials.password\n    );\n\n    if (foundUser) {\n      setIsAuthenticated(true);\n      localStorage.setItem('isAuthenticated', 'true'); // Save authentication state\n      return true;\n    } else {\n      setIsAuthenticated(false);\n      return false;\n    }\n  };\n\n  const logoutUser = () => {\n    setIsAuthenticated(false);\n    localStorage.setItem('isAuthenticated', 'false'); // Save authentication state\n  };\n\n  const registerUser = (newUser) => {\n    const userExists = users.some((user) => user.username === newUser.username);\n    if (!userExists) {\n      setUsers((prevUsers) => [...prevUsers, newUser]);\n      return true;\n    }\n    return false;\n  };\n\n  // Fetch products from backend\n  const fetchProductsFromBackend = async () => {\n    try {\n      const response = await fetch('http://localhost:5002/api/products');\n      const data = await response.json();\n      setProducts(data); // Update the state with fetched products\n      localStorage.setItem('products', JSON.stringify(data)); // Save to localStorage\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n\n  // Function to update products (Fetch latest products from the backend)\n  const updateProducts = async () => {\n    await fetchProductsFromBackend(); // Refresh products from the backend\n  };\n\n  // Product management functions\n  const addProduct = async (newProduct) => {\n    try {\n      // Send new product to the backend (you need to adjust the URL if needed)\n      const response = await fetch('http://localhost:5002/api/products', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newProduct),\n      });\n\n      if (response.ok) {\n        await updateProducts(); // Refresh products after adding a new one\n      }\n    } catch (error) {\n      console.error('Error adding product:', error);\n    }\n  };\n\n  const updateProduct = async (updatedProduct) => {\n    try {\n      // Send updated product to the backend (you need to adjust the URL if needed)\n      const response = await fetch(`http://localhost:5002/api/products/${updatedProduct.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedProduct),\n      });\n\n      if (response.ok) {\n        await updateProducts(); // Refresh products after updating one\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n    }\n  };\n\n  const deleteProduct = async (id) => {\n    try {\n      // Send delete request to the backend (adjust URL if needed)\n      const response = await fetch(`http://localhost:5002/api/products/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await updateProducts(); // Refresh products after deleting one\n      }\n    } catch (error) {\n      console.error('Error deleting product:', error);\n    }\n  };\n\n  // Stock transaction management\nconst addStockTransaction = ({ productId, quantity, type }) => {\n  setProducts((prevProducts) => {\n    const updatedProducts = prevProducts.map((product) => {\n      if (product.id === productId) {\n        const updatedQuantity =\n          type === 'add' ? product.quantity + quantity : product.quantity - quantity;\n\n        return {\n          ...product,\n          quantity: Math.max(updatedQuantity, 0), // Prevent negative quantities\n        };\n      }\n      return product;\n    });\n\n    // Update localStorage with the new products array\n    localStorage.setItem('products', JSON.stringify(updatedProducts));\n\n    return updatedProducts;\n  });\n};\n\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        isAuthenticated,\n        loginUser,\n        logoutUser,\n        products,\n        addProduct,\n        updateProduct,\n        deleteProduct,\n        users,\n        registerUser, // Include registerUser if needed\n        addStockTransaction, // Include stock transaction function\n        updateProducts, // Include updateProducts for refreshing the list\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}