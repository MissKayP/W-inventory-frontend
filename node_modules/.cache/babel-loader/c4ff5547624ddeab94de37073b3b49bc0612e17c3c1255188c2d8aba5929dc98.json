{"ast":null,"code":"// Increase the max listeners if needed to prevent warnings\nrequire('events').EventEmitter.defaultMaxListeners = 20;\nrequire('dotenv').config();\nconst express = require('express');\nconst mysql = require('mysql2');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst bcrypt = require('bcrypt');\nconst app = express();\nconst port = 5000;\n\n// Enable CORS for all requests\napp.use(cors());\n// Parse incoming JSON requests\napp.use(bodyParser.json());\n\n// Create the MySQL connection using environment variables\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n});\n\n// Connect to the MySQL database\ndb.connect(err => {\n  if (err) throw err;\n  console.log('Connected to MySQL Database');\n});\n\n// Root endpoint to check if the server is working\napp.get('/', (req, res) => {\n  res.send('Welcome to the backend API');\n});\n\n// User signup route (changed path to '/api/register')\napp.post('/api/register', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  db.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword], (err, results) => {\n    if (err) return res.status(400).send('Username already exists');\n    res.send('Signup successful!');\n  });\n});\n\n// User login route (no change to '/api/login')\napp.post('/api/login', (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n\n  // Find the user in the database\n  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {\n    if (results.length && (await bcrypt.compare(password, results[0].password))) {\n      res.send(results[0]); // Successful login, send user data\n    } else {\n      res.status(401).send('Invalid credentials'); // Invalid login attempt\n    }\n  });\n});\n\n// Get all users\napp.get('/api/users', (req, res) => {\n  db.query('SELECT * FROM users', (err, results) => {\n    if (err) throw err;\n    res.send(results);\n  });\n});\n\n// Get all products\napp.get('/api/products', (req, res) => {\n  db.query('SELECT * FROM products', (err, results) => {\n    if (err) throw err;\n    res.send(results);\n  });\n});\n\n// Add a new product\napp.post('/api/products', (req, res) => {\n  const {\n    name,\n    description,\n    price,\n    quantity\n  } = req.body;\n  db.query('INSERT INTO products (name, description, price, quantity) VALUES (?, ?, ?, ?)', [name, description, price, quantity], (err, results) => {\n    if (err) {\n      console.error(\"Error adding product:\", err);\n      return res.status(500).send('Error adding product');\n    }\n    res.send('Product added successfully!');\n  });\n});\n\n// Update an existing product\napp.put('/api/products/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    description,\n    price,\n    quantity\n  } = req.body;\n  db.query('UPDATE products SET name = ?, description = ?, price = ?, quantity = ? WHERE id = ?', [name, description, price, quantity, id], (err, results) => {\n    if (err) throw err;\n    res.send('Product updated successfully!');\n  });\n});\n\n// Delete a product\napp.delete('/api/products/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  db.query('DELETE FROM products WHERE id = ?', [id], (err, results) => {\n    if (err) throw err;\n    res.send('Product deleted successfully!');\n  });\n});\n\n// Update a user's information\napp.put('/api/users/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    username,\n    password\n  } = req.body;\n\n  // Hash the new password before updating if it exists\n  if (password) {\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\n      if (err) return res.status(500).send('Error hashing password');\n      db.query('UPDATE users SET username = ?, password = ? WHERE id = ?', [username, hashedPassword, id], (err, results) => {\n        if (err) return res.status(500).send('Error updating user');\n        res.send('User updated successfully!');\n      });\n    });\n  } else {\n    db.query('UPDATE users SET username = ? WHERE id = ?', [username, id], (err, results) => {\n      if (err) return res.status(500).send('Error updating user');\n      res.send('User updated successfully!');\n    });\n  }\n});\n\n// Delete a user\napp.delete('/api/users/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  db.query('DELETE FROM users WHERE id = ?', [id], (err, results) => {\n    if (err) return res.status(500).send('Error deleting user');\n    res.send('User deleted successfully!');\n  });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["require","EventEmitter","defaultMaxListeners","config","express","mysql","cors","bodyParser","bcrypt","app","port","use","json","db","createConnection","host","process","env","DB_HOST","user","DB_USER","password","DB_PASSWORD","database","DB_NAME","connect","err","console","log","get","req","res","send","post","username","body","hashedPassword","hash","query","results","status","length","compare","name","description","price","quantity","error","put","id","params","delete","listen"],"sources":["/Users/Khahli/Documents/wings-cafe-inventory/frontend/src/components/ProductManagement.js"],"sourcesContent":["// Increase the max listeners if needed to prevent warnings\nrequire('events').EventEmitter.defaultMaxListeners = 20;\n\nrequire('dotenv').config();\nconst express = require('express');\nconst mysql = require('mysql2');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst bcrypt = require('bcrypt');\n\nconst app = express();\nconst port = 5000;\n\n// Enable CORS for all requests\napp.use(cors());\n// Parse incoming JSON requests\napp.use(bodyParser.json());\n\n// Create the MySQL connection using environment variables\nconst db = mysql.createConnection({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n});\n\n// Connect to the MySQL database\ndb.connect(err => {\n    if (err) throw err;\n    console.log('Connected to MySQL Database');\n});\n\n// Root endpoint to check if the server is working\napp.get('/', (req, res) => {\n    res.send('Welcome to the backend API');\n});\n\n// User signup route (changed path to '/api/register')\napp.post('/api/register', async (req, res) => {\n    const { username, password } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    db.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword], (err, results) => {\n        if (err) return res.status(400).send('Username already exists');\n        res.send('Signup successful!');\n    });\n});\n\n// User login route (no change to '/api/login')\napp.post('/api/login', (req, res) => {\n    const { username, password } = req.body;\n\n    // Find the user in the database\n    db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {\n        if (results.length && await bcrypt.compare(password, results[0].password)) {\n            res.send(results[0]);  // Successful login, send user data\n        } else {\n            res.status(401).send('Invalid credentials');  // Invalid login attempt\n        }\n    });\n});\n\n// Get all users\napp.get('/api/users', (req, res) => {\n    db.query('SELECT * FROM users', (err, results) => {\n        if (err) throw err;\n        res.send(results);\n    });\n});\n\n// Get all products\napp.get('/api/products', (req, res) => {\n    db.query('SELECT * FROM products', (err, results) => {\n        if (err) throw err;\n        res.send(results);\n    });\n});\n\n// Add a new product\napp.post('/api/products', (req, res) => {\n    const { name, description, price, quantity } = req.body;\n    db.query('INSERT INTO products (name, description, price, quantity) VALUES (?, ?, ?, ?)', \n        [name, description, price, quantity], \n        (err, results) => {\n            if (err) {\n                console.error(\"Error adding product:\", err);\n                return res.status(500).send('Error adding product');\n            }\n            res.send('Product added successfully!');\n    });\n});\n\n// Update an existing product\napp.put('/api/products/:id', (req, res) => {\n    const { id } = req.params;\n    const { name, description, price, quantity } = req.body;\n\n    db.query('UPDATE products SET name = ?, description = ?, price = ?, quantity = ? WHERE id = ?', \n        [name, description, price, quantity, id], \n        (err, results) => {\n            if (err) throw err;\n            res.send('Product updated successfully!');\n    });\n});\n\n// Delete a product\napp.delete('/api/products/:id', (req, res) => {\n    const { id } = req.params;\n\n    db.query('DELETE FROM products WHERE id = ?', [id], (err, results) => {\n        if (err) throw err;\n        res.send('Product deleted successfully!');\n    });\n});\n\n// Update a user's information\napp.put('/api/users/:id', (req, res) => {\n    const { id } = req.params;\n    const { username, password } = req.body;\n\n    // Hash the new password before updating if it exists\n    if (password) {\n        bcrypt.hash(password, 10, (err, hashedPassword) => {\n            if (err) return res.status(500).send('Error hashing password');\n            \n            db.query('UPDATE users SET username = ?, password = ? WHERE id = ?', \n                [username, hashedPassword, id], \n                (err, results) => {\n                    if (err) return res.status(500).send('Error updating user');\n                    res.send('User updated successfully!');\n            });\n        });\n    } else {\n        db.query('UPDATE users SET username = ? WHERE id = ?', \n            [username, id], \n            (err, results) => {\n                if (err) return res.status(500).send('Error updating user');\n                res.send('User updated successfully!');\n        });\n    }\n});\n\n// Delete a user\napp.delete('/api/users/:id', (req, res) => {\n    const { id } = req.params;\n\n    db.query('DELETE FROM users WHERE id = ?', [id], (err, results) => {\n        if (err) return res.status(500).send('Error deleting user');\n        res.send('User deleted successfully!');\n    });\n});\n\n// Start the server\napp.listen(port, () => {\n    console.log(`Server running on http://localhost:${port}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}